{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cuong Tran Vu\\\\ba-phase3\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n\n// components\nimport PaperEntry from '../components/PaperEntry';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = ({\n  setChosenPaper\n}) => {\n  _s();\n  // States\n  const [papers, setPapers] = useState(null); // array an paper Objekten [{paper 1..., paper 2..., ...}]\n  // Übersetzt wäre das:\n  // papers = null\n  // wenn wert von papers geändert wird:\n  // papers = <neuer Wert> (aber ist nicht erlaubt)\n  // ---\n  // Wert von papers ändern:\n  // setPapers(<neuer Wert>)\n  const fileInputRef = useRef(null);\n\n  // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\n  useEffect(() => {\n    const fetchPapers = async () => {\n      //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\n      const response = await fetch('/api/papers');\n      // response in json Format umwandeln\n      const json = await response.json();\n\n      // Statuscode = 2xx => alles ok mit der response\n      if (response.ok) {\n        setPapers(json);\n        // weil papers = json IST NICHT VALIDE\n      }\n    };\n    fetchPapers();\n  }, []);\n\n  // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\n\n  //File Explorer öffnen\n  const handleInsertClick = () => {\n    fileInputRef.current.click();\n  };\n\n  // ausgewähltes .csv in Datenbank einlesen\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const text = await file.text(); // read file contents\n    const rows = text.split('\\n').map(row => row.trim()).filter(Boolean);\n    const headers = rows[0].split(',').map(h => h.trim());\n    const entries = rows.slice(1).map(row => {\n      const values = row.split(',').map(v => v.trim());\n      const obj = {};\n      headers.forEach((header, i) => {\n        obj[header] = values[i];\n      });\n      return obj;\n    });\n    try {\n      const response = await fetch('/api/papers/bulk-insert', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entries)\n      });\n      if (response.ok) {\n        alert('Data inserted successfully!');\n        window.location.reload(); // or update state\n      } else {\n        alert('Failed to insert data.');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Error uploading data.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"papers\",\n      children: papers && papers.map(paper => /*#__PURE__*/_jsxDEV(PaperEntry, {\n        paper: paper,\n        setChosenPaper: setChosenPaper\n      }, paper._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"BPb/T1DL57NdoAlwCA57FKCfuhQ=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","PaperEntry","Header","jsxDEV","_jsxDEV","Home","setChosenPaper","_s","papers","setPapers","fileInputRef","useRef","fetchPapers","response","fetch","json","ok","handleInsertClick","current","click","handleFileUpload","e","file","target","files","text","rows","split","map","row","trim","filter","Boolean","headers","h","entries","slice","values","v","obj","forEach","header","i","method","body","JSON","stringify","alert","window","location","reload","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","paper","_id","_c","$RefreshReg$"],"sources":["C:/Users/Cuong Tran Vu/ba-phase3/frontend/src/pages/Home.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\n// components\r\nimport PaperEntry from '../components/PaperEntry'\r\nimport Header from '../components/Header'\r\n\r\nconst Home = ({setChosenPaper }) => {\r\n    // States\r\n    const [papers, setPapers] = useState(null) // array an paper Objekten [{paper 1..., paper 2..., ...}]\r\n    // Übersetzt wäre das:\r\n    // papers = null\r\n    // wenn wert von papers geändert wird:\r\n    // papers = <neuer Wert> (aber ist nicht erlaubt)\r\n    // ---\r\n    // Wert von papers ändern:\r\n    // setPapers(<neuer Wert>)\r\n    const fileInputRef = useRef(null);\r\n\r\n    // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\r\n    useEffect(() => {\r\n        const fetchPapers = async () => {\r\n            //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\r\n            const response = await fetch('/api/papers')\r\n            // response in json Format umwandeln\r\n            const json = await response.json()\r\n\r\n            // Statuscode = 2xx => alles ok mit der response\r\n            if (response.ok) {\r\n                setPapers(json)\r\n                // weil papers = json IST NICHT VALIDE\r\n            }\r\n        }\r\n\r\n        fetchPapers()\r\n    }, [])\r\n\r\n\r\n    // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\r\n\r\n    //File Explorer öffnen\r\n    const handleInsertClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    // ausgewähltes .csv in Datenbank einlesen\r\n    const handleFileUpload = async (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) return;\r\n\r\n        const text = await file.text(); // read file contents\r\n        const rows = text.split('\\n').map(row => row.trim()).filter(Boolean);\r\n        const headers = rows[0].split(',').map(h => h.trim());\r\n\r\n        const entries = rows.slice(1).map(row => {\r\n        const values = row.split(',').map(v => v.trim());\r\n        const obj = {};\r\n        headers.forEach((header, i) => {\r\n            obj[header] = values[i];\r\n        });\r\n        return obj;\r\n        });\r\n\r\n        try {\r\n        const response = await fetch('/api/papers/bulk-insert', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(entries),\r\n        });\r\n\r\n        if (response.ok) {\r\n            alert('Data inserted successfully!');\r\n            window.location.reload(); // or update state\r\n        } else {\r\n            alert('Failed to insert data.');\r\n        }\r\n        } catch (err) {\r\n        console.error(err);\r\n        alert('Error uploading data.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Header />\r\n            <div className='papers'>\r\n                {papers && papers.map((paper) => (\r\n                    <PaperEntry key={paper._id} paper={paper} setChosenPaper={setChosenPaper} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}