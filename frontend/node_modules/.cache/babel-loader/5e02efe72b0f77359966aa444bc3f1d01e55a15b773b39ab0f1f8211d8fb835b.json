{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cuong Tran Vu\\\\ba-phase3\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport Papa from 'papaparse';\n\n// components\nimport PaperEntry from '../components/PaperEntry';\nimport Header from '../components/Header';\nimport Filter from '../components/Filter';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = ({\n  setChosenPaper\n}) => {\n  _s();\n  // States\n  const [papers, setPapers] = useState(null); // array an paper Objekten [{paper 1..., paper 2..., ...}]\n  // Übersetzt wäre das:\n  // papers = null\n  // wenn wert von papers geändert wird:\n  // papers = <neuer Wert> (aber ist nicht erlaubt)\n  // ---\n  // Wert von papers ändern:\n  // setPapers(<neuer Wert>)\n  const fileInputRef = useRef(null);\n  const [startYear, setStartYear] = useState(null);\n  const [endYear, setEndYear] = useState(null);\n  const [modeling, setModeling] = useState(false);\n  const [extraction, setExtraction] = useState(false);\n  const [verification, setVerification] = useState(false);\n  const [monitoring, setMonitoring] = useState(false);\n  const [audit, setAudit] = useState(false);\n  const [reporting, setReporting] = useState(false);\n  const [explanation, setExplanation] = useState(false);\n  const [recovery, setRecovery] = useState(false);\n  const [resolution, setResolution] = useState(false);\n  const [regulatoryDocuments, setRegulatoryDocuments] = useState(false);\n  const [pureTextRequirements, setPureTextRequirements] = useState(false);\n  const [internalPolicies, setInternalPolicies] = useState(false);\n  const [bpModels, setBpModels] = useState(false);\n  const [bpDescripion, setBpDescripion] = useState(false);\n  const [eventLogs, setEventLogs] = useState(false);\n  const [formalizedConstraints, setFormalizedConstraints] = useState(false);\n  const [semiformalizedConstraints, setSemiformalizedConstraints] = useState(false);\n  const [natureOfData, setNatureOfData] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  console.log(\"searchTerm\", searchTerm);\n\n  // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\n  useEffect(() => {\n    const fetchPapers = async () => {\n      //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\n      const response = await fetch('/api/papers');\n      // response in json Format umwandeln\n      const json = await response.json();\n\n      // Statuscode = 2xx => alles ok mit der response\n      if (response.ok) {\n        setPapers(json);\n        // weil papers = json IST NICHT VALIDE\n      }\n    };\n    fetchPapers();\n  }, [startYear, endYear, modeling, extraction, verification, monitoring, audit, reporting, explanation, recovery, resolution]);\n\n  // Alle Papers löschen\n  const handleDeleteAll = async () => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete ALL papers? This cannot be undone.\");\n    if (!confirmDelete) return;\n    try {\n      const res = await fetch('/api/papers', {\n        method: 'DELETE'\n      });\n      if (res.ok) {\n        alert('All papers deleted!');\n        window.location.reload();\n      } else {\n        const error = await res.json();\n        alert('Failed to delete papers: ' + error.error);\n      }\n    } catch (err) {\n      console.error('Error deleting all papers:', err);\n      alert('Something went wrong while deleting.');\n    }\n  };\n\n  // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\n\n  //File Explorer öffnen\n  const handleInsertClick = () => {\n    fileInputRef.current.click();\n  };\n\n  /* Paper in Database speichern\r\n  Das eingesetzte csv file muss folgende Bedingungen erfüllen:\r\n  1) Semikolon als Trennzeichen\r\n  2) 1. Zeile ist der Header, der die Spaltennamen enthält:\r\n  2.1) Mögliche Spaltennamen sind:  title,abstract,numberOfCitations,doi,year,typeOfPaper,dataAccessible,BPC_Task_ComplianceElicitation_Modeling,BPC_Task_ComplianceElicitation_Extraction,BPC_Task_ComplianceChecking_Verification,BPC_Task_ComplianceChecking_EnforcementMonitoring,BPC_Task_ComplianceChecking_Audit,BPC_Task_ComplianceAnalysis_Reporting,BPC_Task_ComplianceAnalysis_Explanation,BPC_Task_ComplianceEnhancement_Recovery,BPC_Task_ComplianceEnhancement_Resolution,BPC_Task_Others,TypeOfData_RegulatoryDocuments,TypeOfData_PureTextRequirements,TypeOfData_InternalPolicies,TypeOfData_BPModels,TypeOfData_BPDescription,TypeOfData_EventLogs,TypeOfData_FormalizedConstraints,TypeOfData_SemiformalizedConstraints,TypeOfData_Others,FAQ_OtherDataInFuture,FAQ_DataProcessed,FAQ_DataConverter,FAQ_LimitationsOfDataset,FAQ_NatureOfData,FAQ_MoreThanOneVersion,FAQ_ComplianceLevelOrDegree,FAQ_Stakeholders\r\n  2.2) Groß-/Kleinschreibung ist egal\r\n  2.3) Reihenfolge der Spalten ist egal\r\n  3) Ab der 2. Zeile folgen die Einträge\r\n  3.1) Einträge dürfen kein Semikolon enthalten\r\n  3.2) Leeres Feld im Eintrag ist \"\"\r\n  4) Die Einträge (und der Header) sind durch Newlines (\\n) voneineander getrennt\r\n  5) Es dürfen auch Spalten vorkommen, die nicht zu den unter 2.1 genannten zählen. Diese werden nicht in der Datenbank gespeichert\r\n  6) UTF-8 empfohlen\r\n  */\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    // Mal kucken ob das file überhaupt existiert\n    if (!file) return;\n    let insertedCount = 0;\n    Papa.parse(file, {\n      header: true,\n      delimiter: ';',\n      skipEmptyLines: true,\n      complete: async function (results) {\n        console.log('Parsed data:', results.data);\n        let uploadCount = results.data.length;\n        const malformedPapers = [];\n        for (const entry of results.data) {\n          // INPUT VALIDATION\n          const focusEnum = [\"main focus\", \"secondary focus\", \"mentioned in future work\", \"not mentioned\", \"mentioned but not elaborated\", \"not relevant\"];\n          const dataProcessedEnum = [\"automatic\", \"semi-automatic\", \"manual\", \"not relevant\"];\n          const natureOfDataEnum = [\"synthetic\", \"real-world\", \"not relevant\", \"both\"];\n          const complianceLevelEnum = [\"compliance level\", \"compliance degree\", \"both\", \"not relevant\"];\n          function isValidEnum(value, validValues) {\n            return value ? validValues.includes(value.trim().toLowerCase()) : false;\n          }\n          function validateEntry(entry) {\n            const malformed = {\n              title: entry.title || \"Unknown Title\",\n              doi: entry.doi || \"No DOI\",\n              reason: []\n            };\n            const requiredFields = [\"title\", \"year\", \"doi\"];\n            for (const field of requiredFields) {\n              if (!entry[field] || entry[field].trim() === \"\") {\n                malformed.reason.push(`Missing ${field}`);\n              }\n            }\n            const intFields = [\"year\", \"numberOfCitations\"];\n            for (const field of intFields) {\n              if (entry[field] && isNaN(parseInt(entry[field]))) {\n                malformed.reason.push(`Invalid number: ${field}`);\n              }\n            }\n            const booleanFields = [\"dataAccessible\"];\n            for (const field of booleanFields) {\n              var _entry$field;\n              const val = (_entry$field = entry[field]) === null || _entry$field === void 0 ? void 0 : _entry$field.toLowerCase();\n              if (val !== \"true\" && val !== \"false\") {\n                malformed.reason.push(`Invalid boolean: ${field}`);\n              }\n            }\n            const focusFields = [\"BPC_Task_ComplianceElicitation_Modeling\", \"BPC_Task_ComplianceElicitation_Extraction\", \"BPC_Task_ComplianceChecking_Verification\", \"BPC_Task_ComplianceChecking_EnforcementMonitoring\", \"BPC_Task_ComplianceChecking_Audit\", \"BPC_Task_ComplianceAnalysis_Reporting\", \"BPC_Task_ComplianceAnalysis_Explanation\", \"BPC_Task_ComplianceEnhancement_Recovery\", \"BPC_Task_ComplianceEnhancement_Resolution\"];\n            for (const field of focusFields) {\n              if (entry[field] && !isValidEnum(entry[field], focusEnum)) {\n                malformed.reason.push(`Invalid enum value for ${field}`);\n              }\n            }\n            if (entry[\"FAQ_DataProcessed\"] && !isValidEnum(entry[\"FAQ_DataProcessed\"], dataProcessedEnum)) {\n              malformed.reason.push(\"Invalid FAQ_DataProcessed\");\n            }\n            if (entry[\"FAQ_NatureOfData\"] && !isValidEnum(entry[\"FAQ_NatureOfData\"], natureOfDataEnum)) {\n              malformed.reason.push(\"Invalid FAQ_NatureOfData\");\n            }\n            if (entry[\"FAQ_ComplianceLevelOrDegree\"] && !isValidEnum(entry[\"FAQ_ComplianceLevelOrDegree\"], complianceLevelEnum)) {\n              malformed.reason.push(\"Invalid FAQ_ComplianceLevelOrDegree\");\n            }\n            return malformed.reason.length === 0 ? null : malformed;\n          }\n          const validation = validateEntry(entry);\n          if (validation) {\n            malformedPapers.push(validation);\n            console.log(malformedPapers);\n            // nächstes Paper (ohne es zu DB zu adden)\n            continue;\n          }\n\n          // ENDE INPUT VALIDATION                  \n\n          try {\n            const res = await fetch('/api/papers', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(entry)\n            });\n            if (!res.ok) {\n              console.error('Failed to insert paper:', entry, await res.text());\n            } else {\n              insertedCount = insertedCount + 1;\n            }\n          } catch (err) {\n            console.error('Fetch error:', err);\n          }\n        }\n        console.log(\"malformedPapers\", malformedPapers);\n        if (insertedCount === uploadCount) {\n          alert('All papers inserted!');\n        } else if (insertedCount === 0) {\n          alert('No papers inserted! Every paper already exists in database!');\n        } else {\n          alert('Some new papers inserted! Some papers already existed in the database');\n        }\n        window.location.reload();\n      },\n      error: function (error) {\n        console.error('Error parsing CSV:', error);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home_content_container\",\n      children: [/*#__PURE__*/_jsxDEV(Filter, {\n        setStartYear: setStartYear,\n        setEndYear: setEndYear,\n        setModeling: setModeling,\n        setExtraction: setExtraction,\n        setVerification: setVerification,\n        setMonitoring: setMonitoring,\n        setAudit: setAudit,\n        setReporting: setReporting,\n        setExplanation: setExplanation,\n        setRecovery: setRecovery,\n        setResolution: setResolution,\n        setRegulatoryDocuments: setRegulatoryDocuments,\n        setPureTextRequirements: setPureTextRequirements,\n        setInternalPolicies: setInternalPolicies,\n        setBpModels: setBpModels,\n        setBpDescripion: setBpDescripion,\n        setEventLogs: setEventLogs,\n        setFormalizedConstraints: setFormalizedConstraints,\n        setSemiformalizedConstraints: setSemiformalizedConstraints,\n        natureOfData: natureOfData,\n        setNatureOfData: setNatureOfData,\n        setSearchTerm: setSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"insert_data\",\n          onClick: handleInsertClick,\n          children: \"Insert Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete_data\",\n          onClick: handleDeleteAll,\n          children: \"Delete All Papers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\",\n        accept: \".csv\",\n        onChange: handleFileUpload,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-scroll-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"papers\",\n          children: papers && papers.map(paper => {\n            const inYearRange = startYear === null && endYear === null || paper.year >= startYear && paper.year <= endYear;\n            const acceptedFocusValues = [\"Main Focus\", \"Secondary Focus\", \"Mentioned in Future Work\"];\n            const modelingMatch = modeling ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceElicitation_Modeling) : true;\n            const extractionMatch = extraction ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceElicitation_Extraction) : true;\n            const verificationMatch = verification ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_Verification) : true;\n            const monitoringMatch = monitoring ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_EnforcementMonitoring) : true;\n            const auditMatch = audit ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_Audit) : true;\n            const reportingMatch = reporting ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceAnalysis_Reporting) : true;\n            const explanationMatch = explanation ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceAnalysis_Explanation) : true;\n            const recoveryMatch = recovery ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceEnhancement_Recovery) : true;\n            const resolutionMatch = resolution ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceEnhancement_Resolution) : true;\n            const regulatoryDocumentsMatch = regulatoryDocuments ? paper.TypeOfData_RegulatoryDocuments.toLowerCase().startsWith(\"yes\") : true;\n            const pureTextRequirementsMatch = pureTextRequirements ? paper.TypeOfData_PureTextRequirements.toLowerCase().startsWith(\"yes\") : true;\n            const internalPoliciesMatch = internalPolicies ? paper.TypeOfData_InternalPolicies.toLowerCase().startsWith(\"yes\") : true;\n            const bpModelsMatch = bpModels ? paper.TypeOfData_BPModels.toLowerCase().startsWith(\"yes\") : true;\n            const bpDescripionMatch = bpDescripion ? paper.TypeOfData_BPDescription.toLowerCase().startsWith(\"yes\") : true;\n            const eventLogsMatch = eventLogs ? paper.TypeOfData_EventLogs.toLowerCase().startsWith(\"yes\") : true;\n            const formalizedConstraintsMatch = formalizedConstraints ? paper.TypeOfData_FormalizedConstraints.toLowerCase().startsWith(\"yes\") : true;\n            const semiformalizedConstraintsMatch = semiformalizedConstraints ? paper.TypeOfData_SemiformalizedConstraints.toLowerCase().startsWith(\"yes\") : true;\n            const natureOfDataSyntheticMatch = natureOfData.toLowerCase() === \"synthetic\" ? paper.FAQ_NatureOfData.toLowerCase() === \"synthetic\" : true;\n            const natureOfDataRealworldMatch = natureOfData.toLowerCase() === \"real-world\" ? paper.FAQ_NatureOfData.toLowerCase() === \"real-world\" : true;\n            const matchesAll = inYearRange && modelingMatch && extractionMatch && verificationMatch && monitoringMatch && auditMatch && reportingMatch && explanationMatch && recoveryMatch && resolutionMatch && regulatoryDocumentsMatch && pureTextRequirementsMatch && internalPoliciesMatch && bpModelsMatch && bpDescripionMatch && eventLogsMatch && formalizedConstraintsMatch && semiformalizedConstraintsMatch && natureOfDataSyntheticMatch && natureOfDataRealworldMatch && paper.doi.includes(searchTerm);\n            return matchesAll && /*#__PURE__*/_jsxDEV(PaperEntry, {\n              paper: paper,\n              setChosenPaper: setChosenPaper\n            }, paper._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 35\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"NqMcVPnysjIVQmb9P+3IXw+u+60=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","useRef","Papa","PaperEntry","Header","Filter","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","setChosenPaper","_s","papers","setPapers","fileInputRef","startYear","setStartYear","endYear","setEndYear","modeling","setModeling","extraction","setExtraction","verification","setVerification","monitoring","setMonitoring","audit","setAudit","reporting","setReporting","explanation","setExplanation","recovery","setRecovery","resolution","setResolution","regulatoryDocuments","setRegulatoryDocuments","pureTextRequirements","setPureTextRequirements","internalPolicies","setInternalPolicies","bpModels","setBpModels","bpDescripion","setBpDescripion","eventLogs","setEventLogs","formalizedConstraints","setFormalizedConstraints","semiformalizedConstraints","setSemiformalizedConstraints","natureOfData","setNatureOfData","searchTerm","setSearchTerm","console","log","fetchPapers","response","fetch","json","ok","handleDeleteAll","confirmDelete","window","confirm","res","method","alert","location","reload","error","err","handleInsertClick","current","click","handleFileUpload","e","file","target","files","insertedCount","parse","header","delimiter","skipEmptyLines","complete","results","data","uploadCount","length","malformedPapers","entry","focusEnum","dataProcessedEnum","natureOfDataEnum","complianceLevelEnum","isValidEnum","value","validValues","includes","trim","toLowerCase","validateEntry","malformed","title","doi","reason","requiredFields","field","push","intFields","isNaN","parseInt","booleanFields","_entry$field","val","focusFields","validation","headers","body","JSON","stringify","text","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","type","accept","onChange","style","display","map","paper","inYearRange","year","acceptedFocusValues","modelingMatch","BPC_Task_ComplianceElicitation_Modeling","extractionMatch","BPC_Task_ComplianceElicitation_Extraction","verificationMatch","BPC_Task_ComplianceChecking_Verification","monitoringMatch","BPC_Task_ComplianceChecking_EnforcementMonitoring","auditMatch","BPC_Task_ComplianceChecking_Audit","reportingMatch","BPC_Task_ComplianceAnalysis_Reporting","explanationMatch","BPC_Task_ComplianceAnalysis_Explanation","recoveryMatch","BPC_Task_ComplianceEnhancement_Recovery","resolutionMatch","BPC_Task_ComplianceEnhancement_Resolution","regulatoryDocumentsMatch","TypeOfData_RegulatoryDocuments","startsWith","pureTextRequirementsMatch","TypeOfData_PureTextRequirements","internalPoliciesMatch","TypeOfData_InternalPolicies","bpModelsMatch","TypeOfData_BPModels","bpDescripionMatch","TypeOfData_BPDescription","eventLogsMatch","TypeOfData_EventLogs","formalizedConstraintsMatch","TypeOfData_FormalizedConstraints","semiformalizedConstraintsMatch","TypeOfData_SemiformalizedConstraints","natureOfDataSyntheticMatch","FAQ_NatureOfData","natureOfDataRealworldMatch","matchesAll","_id","_c","$RefreshReg$"],"sources":["C:/Users/Cuong Tran Vu/ba-phase3/frontend/src/pages/Home.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport Papa from 'papaparse';\r\n\r\n// components\r\nimport PaperEntry from '../components/PaperEntry'\r\nimport Header from '../components/Header'\r\nimport Filter from '../components/Filter'\r\n\r\nconst Home = ({setChosenPaper }) => {\r\n    // States\r\n    const [papers, setPapers] = useState(null) // array an paper Objekten [{paper 1..., paper 2..., ...}]\r\n    // Übersetzt wäre das:\r\n    // papers = null\r\n    // wenn wert von papers geändert wird:\r\n    // papers = <neuer Wert> (aber ist nicht erlaubt)\r\n    // ---\r\n    // Wert von papers ändern:\r\n    // setPapers(<neuer Wert>)\r\n    const fileInputRef = useRef(null);\r\n    const [startYear, setStartYear] = useState(null)\r\n    const [endYear, setEndYear] = useState(null)\r\n    const [modeling, setModeling] = useState(false)\r\n    const [extraction, setExtraction] = useState(false)\r\n    const [verification, setVerification] = useState(false)\r\n    const [monitoring, setMonitoring] = useState(false)\r\n    const [audit, setAudit] = useState(false)\r\n    const [reporting, setReporting] = useState(false)\r\n    const [explanation, setExplanation] = useState(false)\r\n    const [recovery, setRecovery] = useState(false)\r\n    const [resolution, setResolution] = useState(false)\r\n\r\n    const [regulatoryDocuments, setRegulatoryDocuments] = useState(false)\r\n    const [pureTextRequirements, setPureTextRequirements] = useState(false)\r\n    const [internalPolicies, setInternalPolicies] = useState(false)\r\n    const [bpModels, setBpModels] = useState(false)\r\n    const [bpDescripion, setBpDescripion] = useState(false)\r\n    const [eventLogs, setEventLogs] = useState(false)\r\n    const [formalizedConstraints, setFormalizedConstraints] = useState(false)\r\n    const [semiformalizedConstraints, setSemiformalizedConstraints] = useState(false)\r\n\r\n    const [natureOfData, setNatureOfData] = useState(\"\")\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n    console.log(\"searchTerm\", searchTerm)\r\n\r\n    // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\r\n    useEffect(() => {\r\n        const fetchPapers = async () => {\r\n            //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\r\n            const response = await fetch('/api/papers')\r\n            // response in json Format umwandeln\r\n            const json = await response.json()\r\n\r\n            // Statuscode = 2xx => alles ok mit der response\r\n            if (response.ok) {\r\n                setPapers(json)\r\n                // weil papers = json IST NICHT VALIDE\r\n            }\r\n        }\r\n\r\n        fetchPapers()\r\n    }, [startYear, endYear, modeling, extraction, verification, monitoring, audit, reporting, explanation, recovery, resolution])\r\n\r\n    // Alle Papers löschen\r\n    const handleDeleteAll = async () => {\r\n        const confirmDelete = window.confirm(\"Are you sure you want to delete ALL papers? This cannot be undone.\");\r\n      \r\n        if (!confirmDelete) return;\r\n      \r\n        try {\r\n          const res = await fetch('/api/papers', {\r\n            method: 'DELETE',\r\n          });\r\n      \r\n          if (res.ok) {\r\n            alert('All papers deleted!');\r\n            window.location.reload();\r\n          } else {\r\n            const error = await res.json();\r\n            alert('Failed to delete papers: ' + error.error);\r\n          }\r\n        } catch (err) {\r\n          console.error('Error deleting all papers:', err);\r\n          alert('Something went wrong while deleting.');\r\n        }\r\n      };\r\n\r\n    // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\r\n\r\n    //File Explorer öffnen\r\n    const handleInsertClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n    \r\n    /* Paper in Database speichern\r\nDas eingesetzte csv file muss folgende Bedingungen erfüllen:\r\n1) Semikolon als Trennzeichen\r\n2) 1. Zeile ist der Header, der die Spaltennamen enthält:\r\n    2.1) Mögliche Spaltennamen sind:  title,abstract,numberOfCitations,doi,year,typeOfPaper,dataAccessible,BPC_Task_ComplianceElicitation_Modeling,BPC_Task_ComplianceElicitation_Extraction,BPC_Task_ComplianceChecking_Verification,BPC_Task_ComplianceChecking_EnforcementMonitoring,BPC_Task_ComplianceChecking_Audit,BPC_Task_ComplianceAnalysis_Reporting,BPC_Task_ComplianceAnalysis_Explanation,BPC_Task_ComplianceEnhancement_Recovery,BPC_Task_ComplianceEnhancement_Resolution,BPC_Task_Others,TypeOfData_RegulatoryDocuments,TypeOfData_PureTextRequirements,TypeOfData_InternalPolicies,TypeOfData_BPModels,TypeOfData_BPDescription,TypeOfData_EventLogs,TypeOfData_FormalizedConstraints,TypeOfData_SemiformalizedConstraints,TypeOfData_Others,FAQ_OtherDataInFuture,FAQ_DataProcessed,FAQ_DataConverter,FAQ_LimitationsOfDataset,FAQ_NatureOfData,FAQ_MoreThanOneVersion,FAQ_ComplianceLevelOrDegree,FAQ_Stakeholders\r\n    2.2) Groß-/Kleinschreibung ist egal\r\n    2.3) Reihenfolge der Spalten ist egal\r\n3) Ab der 2. Zeile folgen die Einträge\r\n    3.1) Einträge dürfen kein Semikolon enthalten\r\n    3.2) Leeres Feld im Eintrag ist \"\"\r\n4) Die Einträge (und der Header) sind durch Newlines (\\n) voneineander getrennt\r\n5) Es dürfen auch Spalten vorkommen, die nicht zu den unter 2.1 genannten zählen. Diese werden nicht in der Datenbank gespeichert\r\n6) UTF-8 empfohlen\r\n    */\r\n    const handleFileUpload = async (e) => {\r\n        const file = e.target.files[0];\r\n        // Mal kucken ob das file überhaupt existiert\r\n        if (!file) return;\r\n\r\n        let insertedCount = 0\r\n\r\n        Papa.parse(file, {\r\n            header: true,\r\n            delimiter: ';',\r\n            skipEmptyLines: true,\r\n            complete: async function (results) {\r\n                console.log('Parsed data:', results.data);\r\n                let uploadCount = results.data.length\r\n                const malformedPapers = []\r\n\r\n                for (const entry of results.data) {\r\n\r\n                  // INPUT VALIDATION\r\n                  const focusEnum = [\r\n                    \"main focus\",\r\n                    \"secondary focus\",\r\n                    \"mentioned in future work\",\r\n                    \"not mentioned\",\r\n                    \"mentioned but not elaborated\",\r\n                    \"not relevant\"\r\n                  ];\r\n                  \r\n                  const dataProcessedEnum = [\"automatic\", \"semi-automatic\", \"manual\", \"not relevant\"];\r\n                  const natureOfDataEnum = [\"synthetic\", \"real-world\", \"not relevant\", \"both\"];\r\n                  const complianceLevelEnum = [\"compliance level\", \"compliance degree\", \"both\", \"not relevant\"];\r\n                  \r\n                  function isValidEnum(value, validValues) {\r\n                    return value ? validValues.includes(value.trim().toLowerCase()) : false;\r\n                  }\r\n                  \r\n                  function validateEntry(entry) {\r\n                    const malformed = {\r\n                      title: entry.title || \"Unknown Title\",\r\n                      doi: entry.doi || \"No DOI\",\r\n                      reason: []\r\n                    };\r\n                  \r\n                    const requiredFields = [\"title\", \"year\", \"doi\"];\r\n                    for (const field of requiredFields) {\r\n                      if (!entry[field] || entry[field].trim() === \"\") {\r\n                        malformed.reason.push(`Missing ${field}`);\r\n                      }\r\n                    }\r\n                  \r\n                    const intFields = [\"year\", \"numberOfCitations\"];\r\n                    for (const field of intFields) {\r\n                      if (entry[field] && isNaN(parseInt(entry[field]))) {\r\n                        malformed.reason.push(`Invalid number: ${field}`);\r\n                      }\r\n                    }\r\n                  \r\n                    const booleanFields = [\"dataAccessible\"];\r\n                    for (const field of booleanFields) {\r\n                      const val = entry[field]?.toLowerCase();\r\n                      if (val !== \"true\" && val !== \"false\") {\r\n                        malformed.reason.push(`Invalid boolean: ${field}`);\r\n                      }\r\n                    }\r\n                  \r\n                    const focusFields = [\r\n                      \"BPC_Task_ComplianceElicitation_Modeling\",\r\n                      \"BPC_Task_ComplianceElicitation_Extraction\",\r\n                      \"BPC_Task_ComplianceChecking_Verification\",\r\n                      \"BPC_Task_ComplianceChecking_EnforcementMonitoring\",\r\n                      \"BPC_Task_ComplianceChecking_Audit\",\r\n                      \"BPC_Task_ComplianceAnalysis_Reporting\",\r\n                      \"BPC_Task_ComplianceAnalysis_Explanation\",\r\n                      \"BPC_Task_ComplianceEnhancement_Recovery\",\r\n                      \"BPC_Task_ComplianceEnhancement_Resolution\"\r\n                    ];\r\n                    for (const field of focusFields) {\r\n                      if (entry[field] && !isValidEnum(entry[field], focusEnum)) {\r\n                        malformed.reason.push(`Invalid enum value for ${field}`);\r\n                      }\r\n                    }\r\n                  \r\n                    if (entry[\"FAQ_DataProcessed\"] && !isValidEnum(entry[\"FAQ_DataProcessed\"], dataProcessedEnum)) {\r\n                      malformed.reason.push(\"Invalid FAQ_DataProcessed\");\r\n                    }\r\n                    if (entry[\"FAQ_NatureOfData\"] && !isValidEnum(entry[\"FAQ_NatureOfData\"], natureOfDataEnum)) {\r\n                      malformed.reason.push(\"Invalid FAQ_NatureOfData\");\r\n                    }\r\n                    if (entry[\"FAQ_ComplianceLevelOrDegree\"] && !isValidEnum(entry[\"FAQ_ComplianceLevelOrDegree\"], complianceLevelEnum)) {\r\n                      malformed.reason.push(\"Invalid FAQ_ComplianceLevelOrDegree\");\r\n                    }\r\n                  \r\n                    return malformed.reason.length === 0 ? null : malformed;\r\n                  }\r\n                  \r\n                  const validation = validateEntry(entry)\r\n                  if (validation) {\r\n                    malformedPapers.push(validation)\r\n                    console.log(malformedPapers)\r\n                    // nächstes Paper (ohne es zu DB zu adden)\r\n                    continue\r\n                  }\r\n                  \r\n                  // ENDE INPUT VALIDATION                  \r\n\r\n                  try {\r\n                    const res = await fetch('/api/papers', {\r\n                      method: 'POST',\r\n                      headers: { 'Content-Type': 'application/json' },\r\n                      body: JSON.stringify(entry),\r\n                    });\r\n\r\n                    if (!res.ok) {\r\n                      console.error('Failed to insert paper:', entry, await res.text());\r\n                    } else {\r\n                      insertedCount = insertedCount + 1\r\n                    }\r\n                  } catch (err) {\r\n                    console.error('Fetch error:', err);\r\n                  }\r\n                }\r\n                \r\n                console.log(\"malformedPapers\", malformedPapers)\r\n\r\n                if (insertedCount === uploadCount) {\r\n                  alert('All papers inserted!');\r\n                } else if (insertedCount === 0){\r\n                  alert('No papers inserted! Every paper already exists in database!');\r\n                } else {\r\n                  alert('Some new papers inserted! Some papers already existed in the database')\r\n                }\r\n                window.location.reload();\r\n              },\r\n            error: function (error) {\r\n                console.error('Error parsing CSV:', error);\r\n            }\r\n            });\r\n          }\r\n\r\n    return (\r\n        <>\r\n            <div className='home_content_container'>\r\n            <Filter\r\n                setStartYear={setStartYear}\r\n                setEndYear={setEndYear}\r\n                setModeling={setModeling}\r\n                setExtraction={setExtraction}\r\n                setVerification={setVerification}\r\n                setMonitoring={setMonitoring}\r\n                setAudit={setAudit}\r\n                setReporting={setReporting}\r\n                setExplanation={setExplanation}\r\n                setRecovery={setRecovery}\r\n                setResolution={setResolution}\r\n\r\n                setRegulatoryDocuments={setRegulatoryDocuments}\r\n                setPureTextRequirements={setPureTextRequirements}\r\n                setInternalPolicies={setInternalPolicies}\r\n                setBpModels={setBpModels}\r\n                setBpDescripion={setBpDescripion}\r\n                setEventLogs={setEventLogs}\r\n                setFormalizedConstraints={setFormalizedConstraints}\r\n                setSemiformalizedConstraints={setSemiformalizedConstraints}\r\n\r\n                natureOfData={natureOfData}\r\n                setNatureOfData={setNatureOfData}\r\n\r\n                setSearchTerm={setSearchTerm}\r\n            />\r\n            <div className='button_container'>\r\n              <button className=\"insert_data\" onClick={handleInsertClick}>Insert Data</button>\r\n              <button className=\"delete_data\" onClick={handleDeleteAll}>Delete All Papers</button>\r\n            </div>\r\n            <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                accept=\".csv\"\r\n                onChange={handleFileUpload}\r\n                style={{ display: 'none' }}\r\n            />\r\n            </div>\r\n            <div className='table-scroll-container'>\r\n              <div className=\"home\">\r\n              <Header />\r\n                  <div className='papers'>\r\n                      {papers && papers.map((paper) => {\r\n                          const inYearRange = startYear === null && endYear === null || paper.year >= startYear && paper.year <= endYear;\r\n\r\n                          const acceptedFocusValues = [\r\n                            \"Main Focus\",\r\n                            \"Secondary Focus\",\r\n                            \"Mentioned in Future Work\"\r\n                          ];\r\n\r\n                          const modelingMatch = modeling\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceElicitation_Modeling)\r\n                          : true;\r\n\r\n                        const extractionMatch = extraction\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceElicitation_Extraction)\r\n                          : true;\r\n\r\n                        const verificationMatch = verification\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_Verification)\r\n                          : true;\r\n\r\n                        const monitoringMatch = monitoring\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_EnforcementMonitoring)\r\n                          : true;\r\n\r\n                        const auditMatch = audit\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceChecking_Audit)\r\n                          : true;\r\n\r\n                        const reportingMatch = reporting\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceAnalysis_Reporting)\r\n                          : true;\r\n\r\n                        const explanationMatch = explanation\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceAnalysis_Explanation)\r\n                          : true;\r\n\r\n                        const recoveryMatch = recovery\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceEnhancement_Recovery)\r\n                          : true;\r\n\r\n                        const resolutionMatch = resolution\r\n                          ? acceptedFocusValues.includes(paper.BPC_Task_ComplianceEnhancement_Resolution)\r\n                          : true;\r\n                          const regulatoryDocumentsMatch = regulatoryDocuments\r\n                              ? paper.TypeOfData_RegulatoryDocuments.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n\r\n                          const pureTextRequirementsMatch = pureTextRequirements\r\n                              ? paper.TypeOfData_PureTextRequirements.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n                          \r\n                          const internalPoliciesMatch = internalPolicies\r\n                              ? paper.TypeOfData_InternalPolicies.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n                          \r\n                          const bpModelsMatch = bpModels\r\n                              ? paper.TypeOfData_BPModels.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n                          \r\n                          const bpDescripionMatch = bpDescripion\r\n                              ? paper.TypeOfData_BPDescription.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n\r\n                          const eventLogsMatch = eventLogs\r\n                              ? paper.TypeOfData_EventLogs.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n\r\n                          const formalizedConstraintsMatch = formalizedConstraints\r\n                              ? paper.TypeOfData_FormalizedConstraints.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n\r\n                          const semiformalizedConstraintsMatch = semiformalizedConstraints\r\n                              ? paper.TypeOfData_SemiformalizedConstraints.toLowerCase().startsWith(\"yes\")\r\n                              : true\r\n\r\n                          const natureOfDataSyntheticMatch = natureOfData.toLowerCase() === \"synthetic\"\r\n                              ? paper.FAQ_NatureOfData.toLowerCase() === \"synthetic\"\r\n                              : true\r\n\r\n                          const natureOfDataRealworldMatch = natureOfData.toLowerCase() === \"real-world\"\r\n                              ? paper.FAQ_NatureOfData.toLowerCase() === \"real-world\"\r\n                              : true\r\n                        \r\n                          const matchesAll =\r\n                            inYearRange &&\r\n                            modelingMatch &&\r\n                            extractionMatch &&\r\n                            verificationMatch &&\r\n                            monitoringMatch &&\r\n                            auditMatch &&\r\n                            reportingMatch &&\r\n                            explanationMatch &&\r\n                            recoveryMatch &&\r\n                            resolutionMatch &&\r\n                            regulatoryDocumentsMatch &&\r\n                            pureTextRequirementsMatch &&\r\n                            internalPoliciesMatch &&\r\n                            bpModelsMatch &&\r\n                            bpDescripionMatch &&\r\n                            eventLogsMatch &&\r\n                            formalizedConstraintsMatch &&\r\n                            semiformalizedConstraintsMatch &&\r\n                            natureOfDataSyntheticMatch &&\r\n                            natureOfDataRealworldMatch &&\r\n\r\n                            paper.doi.includes(searchTerm)\r\n                      \r\n                          return (\r\n                              matchesAll && (\r\n                                  <PaperEntry\r\n                                      key={paper._id}\r\n                                      paper={paper}\r\n                                      setChosenPaper={setChosenPaper}\r\n                                  />\r\n                              )\r\n                          );\r\n                      })}\r\n                  </div>\r\n              </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Home"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}