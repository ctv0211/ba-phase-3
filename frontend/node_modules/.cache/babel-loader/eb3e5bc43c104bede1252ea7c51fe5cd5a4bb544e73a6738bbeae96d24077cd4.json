{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cuong Tran Vu\\\\ba-phase3\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\n\n// components\nimport PaperEntry from '../components/PaperEntry';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = ({\n  setChosenPaper\n}) => {\n  _s();\n  // States\n  const [papers, setPapers] = useState(null); // array an paper Objekten [{paper 1..., paper 2..., ...}]\n  // Übersetzt wäre das:\n  // papers = null\n  // wenn wert von papers geändert wird:\n  // papers = <neuer Wert> (aber ist nicht erlaubt)\n  // ---\n  // Wert von papers ändern:\n  // setPapers(<neuer Wert>)\n  const fileInputRef = useRef(null);\n\n  // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\n  useEffect(() => {\n    const fetchPapers = async () => {\n      //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\n      const response = await fetch('/api/papers');\n      // response in json Format umwandeln\n      const json = await response.json();\n\n      // Statuscode = 2xx => alles ok mit der response\n      if (response.ok) {\n        setPapers(json);\n        // weil papers = json IST NICHT VALIDE\n      }\n    };\n    fetchPapers();\n  }, []);\n\n  // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\n\n  //File Explorer öffnen\n  const handleInsertClick = () => {\n    fileInputRef.current.click();\n  };\n\n  // Paper in Database speichern\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    try {\n      const text = await file.text();\n      console.log(\"text\", text);\n      const rows = text.split('\\n').map(row => row.trim()).filter(Boolean);\n      const headers = rows[0].split(',').map(h => h.trim());\n      const entries = rows.slice(1).map(row => {\n        const values = row.split(',').map(v => v.trim());\n        const obj = {};\n        headers.forEach((header, i) => {\n          obj[header] = values[i];\n        });\n        return obj;\n      });\n\n      // POST jeder Eintrag in die Datenbank\n      console.log(entries);\n      for (const entry of entries) {\n        const res = await fetch('/api/papers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(entry)\n        });\n        if (!res.ok) {\n          console.error('Failed to insert paper:', entry, await res.text());\n        }\n      }\n      alert('All data inserted!');\n      //window.location.reload();\n    } catch (err) {\n      console.error('Error uploading file:', err);\n      alert('Upload failed.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInsertClick,\n      children: \"Insert Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: fileInputRef,\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"papers\",\n        children: papers && papers.map(paper => /*#__PURE__*/_jsxDEV(PaperEntry, {\n          paper: paper,\n          setChosenPaper: setChosenPaper\n        }, paper._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"BPb/T1DL57NdoAlwCA57FKCfuhQ=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","useRef","PaperEntry","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","setChosenPaper","_s","papers","setPapers","fileInputRef","fetchPapers","response","fetch","json","ok","handleInsertClick","current","click","handleFileUpload","e","file","target","files","text","console","log","rows","split","map","row","trim","filter","Boolean","headers","h","entries","slice","values","v","obj","forEach","header","i","entry","res","method","body","JSON","stringify","error","alert","err","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","accept","onChange","style","display","className","paper","_id","_c","$RefreshReg$"],"sources":["C:/Users/Cuong Tran Vu/ba-phase3/frontend/src/pages/Home.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\n\r\n// components\r\nimport PaperEntry from '../components/PaperEntry'\r\nimport Header from '../components/Header'\r\n\r\nconst Home = ({setChosenPaper }) => {\r\n    // States\r\n    const [papers, setPapers] = useState(null) // array an paper Objekten [{paper 1..., paper 2..., ...}]\r\n    // Übersetzt wäre das:\r\n    // papers = null\r\n    // wenn wert von papers geändert wird:\r\n    // papers = <neuer Wert> (aber ist nicht erlaubt)\r\n    // ---\r\n    // Wert von papers ändern:\r\n    // setPapers(<neuer Wert>)\r\n    const fileInputRef = useRef(null);\r\n\r\n    // useEffect hook: rufe diesen Code nur einmalig auf (wenn Home Component erstmalig gerendert wird)\r\n    useEffect(() => {\r\n        const fetchPapers = async () => {\r\n            //quasi das gleiche was zum testen vorher in Postman gemacht wurde, GET all papers aufrufen\r\n            const response = await fetch('/api/papers')\r\n            // response in json Format umwandeln\r\n            const json = await response.json()\r\n\r\n            // Statuscode = 2xx => alles ok mit der response\r\n            if (response.ok) {\r\n                setPapers(json)\r\n                // weil papers = json IST NICHT VALIDE\r\n            }\r\n        }\r\n\r\n        fetchPapers()\r\n    }, [])\r\n\r\n\r\n    // Funktionen, um den Fileexplorer zu öffnen und die ausgewählte .csv-Datei in die Datenbank einzulesen\r\n\r\n    //File Explorer öffnen\r\n    const handleInsertClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n    \r\n    // Paper in Database speichern\r\n    const handleFileUpload = async (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) return;\r\n    \r\n        try {\r\n            const text = await file.text();\r\n            console.log(\"text\", text)\r\n            const rows = text.split('\\n').map(row => row.trim()).filter(Boolean);\r\n            const headers = rows[0].split(',').map(h => h.trim());\r\n        \r\n            const entries = rows.slice(1).map(row => {\r\n                const values = row.split(',').map(v => v.trim());\r\n                const obj = {};\r\n                headers.forEach((header, i) => {\r\n                obj[header] = values[i];\r\n                });\r\n                return obj;\r\n            });\r\n        \r\n            // POST jeder Eintrag in die Datenbank\r\n            console.log(entries)\r\n            for (const entry of entries) {\r\n                const res = await fetch('/api/papers', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(entry),\r\n                });\r\n        \r\n                if (!res.ok) {\r\n                console.error('Failed to insert paper:', entry, await res.text());\r\n                }\r\n            }\r\n        \r\n            alert('All data inserted!');\r\n            //window.location.reload();\r\n        } catch (err) {\r\n            console.error('Error uploading file:', err);\r\n            alert('Upload failed.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleInsertClick}>Insert Data</button>\r\n            <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                accept=\".csv\"\r\n                onChange={handleFileUpload}\r\n                style={{ display: 'none' }}\r\n            />\r\n            <div className=\"home\">\r\n            <Header />\r\n                <div className='papers'>\r\n                    {papers && papers.map((paper) => (\r\n                        <PaperEntry key={paper._id} paper={paper} setChosenPaper={setChosenPaper} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}